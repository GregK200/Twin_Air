import pandas as pd
import matplotlib.pyplot as plt
import sys
import numpy

# Load the CSV file
file_path = 'C:\\Users\\Greg\\Downloads\\Marina_Mentou_Experiments - data (5).csv'
data = pd.read_csv(file_path, low_memory=False, decimal = ',')

# Convert the 'MC_PM25' to numeric (removing commas if present) and handle non-numeric values
data['MC_PM25'] = pd.to_numeric(data['MC_PM25'], errors='coerce')

# Convert the 'Datetime' column to datetime format
data['Datetime'] = pd.to_datetime(data['Datetime'], errors='coerce')

# Drop rows with missing PM2.5 or Datetime values
data_clean = data.dropna(subset=['MC_PM25', 'Datetime'])

# Extract the date from the 'Datetime' column for easier filtering
data_clean['Date'] = data_clean['Datetime'].dt.date

# Filter the data for May 10, 2024
specific_date = pd.to_datetime('2024-12-10').date()
daily_data = data_clean[data_clean['Date'] == specific_date]

# Add 'Hour' and 'Minute' columns for easy filtering by time using .loc[] to avoid SettingWithCopyWarning
daily_data.loc[:, 'Hour'] = daily_data['Datetime'].dt.hour
daily_data.loc[:, 'Minute'] = daily_data['Datetime'].dt.minute

# Define start and end time
start_time = '19:00'
end_time = '21:00'

# Convert start and end time to datetime for filtering
start_time_dt = pd.to_datetime(f'{specific_date} {start_time}')
end_time_dt = pd.to_datetime(f'{specific_date} {end_time}')

# Filter the data within the specific time range
filtered_data = daily_data[(daily_data['Datetime'] >= start_time_dt) & (daily_data['Datetime'] <= end_time_dt)]

# Device IDs
device_1_id = '0080E1150510BDE6'
device_2_id = '0080E1150533F233'

# Select the columns to save
columns_to_save = ['Datetime', 'Relative_Humidity', 'Temperature', 'MC_PM25', 'NC_PM25']

# Filter the data for each device
device_1_data_filtered = filtered_data.loc[filtered_data['Device_ID'] == device_1_id, columns_to_save]
device_2_data_filtered = filtered_data.loc[filtered_data['Device_ID'] == device_2_id, columns_to_save]

# Generalized sampling function
def apply_sampling(df, freq, label):
    df[label] = 0
    df = df.sort_values(by='Datetime')
    for time_block, group in df.groupby(pd.Grouper(key='Datetime', freq=freq)):
        if not group.empty:
            first_index = group.index[0]
            df.loc[first_index, label] = df.loc[first_index, 'MC_PM25']
    return df

def apply_sampling_NC(df, freq, label):
    df[label] = 0
    df = df.sort_values(by='Datetime')
    for time_block, group in df.groupby(pd.Grouper(key='Datetime', freq=freq)):
        if not group.empty:
            first_index = group.index[0]
            df.loc[first_index, label] = df.loc[first_index, 'NC_PM25']
    return df

# Apply all sampling intervals to the same dataset
device_1_data_filtered = apply_sampling(device_1_data_filtered, '5T', '5_min_sample')
device_1_data_filtered = apply_sampling(device_1_data_filtered, '10T', '10_min_sample')
device_1_data_filtered = apply_sampling(device_1_data_filtered, '15T', '15_min_sample')
device_1_data_filtered = apply_sampling(device_1_data_filtered, '2.5T', '2.5_min_sample')
device_1_data_filtered = apply_sampling(device_1_data_filtered, '7.5T', '7.5_min_sample')

device_1_data_filtered = apply_sampling_NC(device_1_data_filtered, '5T', '5_min_sample_NC')
device_1_data_filtered = apply_sampling_NC(device_1_data_filtered, '10T', '10_min_sample_NC')
device_1_data_filtered = apply_sampling_NC(device_1_data_filtered, '15T', '15_min_sample_NC')
device_1_data_filtered = apply_sampling_NC(device_1_data_filtered, '2.5T', '2.5_min_sample_NC')
device_1_data_filtered = apply_sampling_NC(device_1_data_filtered, '7.5T', '7.5_min_sample_NC')

device_2_data_filtered = apply_sampling(device_2_data_filtered, '5T', '5_min_sample')
device_2_data_filtered = apply_sampling(device_2_data_filtered, '10T', '10_min_sample')
device_2_data_filtered = apply_sampling(device_2_data_filtered, '15T', '15_min_sample')
device_2_data_filtered = apply_sampling(device_2_data_filtered, '2.5T', '2.5_min_sample')
device_2_data_filtered = apply_sampling(device_2_data_filtered, '7.5T', '7.5_min_sample')

device_2_data_filtered = apply_sampling_NC(device_2_data_filtered, '5T', '5_min_sample_NC')
device_2_data_filtered = apply_sampling_NC(device_2_data_filtered, '10T', '10_min_sample_NC')
device_2_data_filtered = apply_sampling_NC(device_2_data_filtered, '15T', '15_min_sample_NC')
device_2_data_filtered = apply_sampling_NC(device_2_data_filtered, '2.5T', '2.5_min_sample_NC')
device_2_data_filtered = apply_sampling_NC(device_2_data_filtered, '7.5T', '7.5_min_sample_NC')

# Replace colons in the time strings to make valid filenames for Windows
start_time_str = start_time.replace(':', '-')
end_time_str = end_time.replace(':', '-')

# Save the filtered dataset with all sampling intervals to a single CSV file
device_1_data_filtered.to_csv(f'device_1_{device_1_id}_{specific_date}_{start_time_str}_to_{end_time_str}_with_sampling.csv', index=False)
device_2_data_filtered.to_csv(f'device_2_{device_2_id}_{specific_date}_{start_time_str}_to_{end_time_str}_with_sampling.csv', index=False)

print(f"CSV files created for Device 1 and Device 2 from {start_time} to {end_time} on {specific_date} with all sampling intervals.")